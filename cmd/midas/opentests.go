package main

import (
	"fmt"
	"time"
)

type Intervals5m struct {
	ilist []float64
}

type Dipcount struct {
	smalldipcount float64
	bigdipcount   float64
}

func runopentests(date time.Time) {
	fmt.Println("Running tests...\n")
	var smalldip Intervals5m
	var bigdip Intervals5m
	var charts []Chart
	var dipcount Dipcount
	dipcount.smalldipcount = 0.0
	dipcount.bigdipcount = 0.0

	getallcharts(&charts)
	analysecharts(charts, &smalldip, &bigdip, &dipcount, date)
	fmt.Println("\nPrinting dips over 10%")
	printaverages(&bigdip, dipcount.bigdipcount)
	fmt.Println("\nPrinting dips under 10%")
	printaverages(&smalldip, dipcount.smalldipcount)
}

func analysecharts(charts []Chart, smalldip *Intervals5m, bigdip *Intervals5m, dipcount *Dipcount, date time.Time) {
	for _, chart := range charts {
		pmh := getpremarkethighprice(&chart, date)
		mopen := getopenprice(&chart, date)
		stopt := time.Date(date.Year(), date.Month(), date.Day(), 15, 0, 0, 0, time.UTC)
		startt := time.Date(date.Year(), date.Month(), date.Day(), 13, 30, 0, 0, time.UTC)

		count := 0
		premarketfadepct := (pmh - mopen) / mopen
		issmalldip := false

		if mopen != 0 {
			for i, t := range chart.Chart.Result[0].Timestamp {
				if t > int(startt.Unix()) {
					// Measure from open time
					gappct := (chart.Chart.Result[0].Indicators.Quote[0].Close[i] - mopen) / mopen
					if premarketfadepct < 0.1 {
						issmalldip = true
						if len(smalldip.ilist) <= count {
							smalldip.ilist = append(smalldip.ilist, gappct)
						} else {
							smalldip.ilist[count] = smalldip.ilist[count] + gappct
						}
					} else {
						if len(bigdip.ilist) <= count {
							bigdip.ilist = append(bigdip.ilist, gappct)
						} else {
							bigdip.ilist[count] = bigdip.ilist[count] + gappct
						}

					}
					count++
				}

				if t == int(stopt.Unix()) { // Stop measuring at 15:00 UTC
					break
				}
			}

			if issmalldip {
				dipcount.smalldipcount++
			} else {
				dipcount.bigdipcount++
			}
		}
	}
}

func printaverages(intervals5m *Intervals5m, dipcount float64) {
	for _, p := range intervals5m.ilist {
		fmt.Println(p / dipcount)
	}
	// fmt.Println(dipcount)
}

func getpctfrommktopen(mopen float64, close float64) float64 {
	return (close - mopen) / mopen
}

func getpremarkethighprice(chart *Chart, date time.Time) float64 {
	high := 0.0
	opent := time.Date(date.Year(), date.Month(), date.Day(), 13, 25, 0, 0, time.UTC)
	for i, t := range chart.Chart.Result[0].Timestamp {
		temphigh := chart.Chart.Result[0].Indicators.Quote[0].High[i]
		if temphigh > high {
			high = temphigh
		}
		if t == int(opent.Unix()) {
			return high
		}
	}
	return 0.0
}

func getopenprice(chart *Chart, date time.Time) float64 {
	opent := time.Date(date.Year(), date.Month(), date.Day(), 13, 30, 0, 0, time.UTC)
	for i, t := range chart.Chart.Result[0].Timestamp {
		if t == int(opent.Unix()) {
			return chart.Chart.Result[0].Indicators.Quote[0].Open[i]
		}
	}
	return 0.0
}
